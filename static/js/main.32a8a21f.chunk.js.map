{"version":3,"sources":["utils/api.js","components/WeatherCard.js","components/DatePicker.js","App.js","serviceWorker.js","index.js"],"names":["getWeekWeatherData","date","a","dateObj","Date","day","String","getDate","month","getMonth","year","getFullYear","axios","get","response","data","WeatherCard","props","WeatherCardList","weather","map","key","sol","className","season","data-tip","data-for","air","temperature","average","toPrecision","pressure","wind","speed","id","effect","aria-haspopup","minimum","maximum","length","DatePicker","inputValue","console","log","htmlFor","type","onChange","e","changeDate","target","value","min","App","state","setState","undefined","this","getWeather","setStateWeather","prevProps","prevState","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.32a8a21f.chunk.js","sourcesContent":["import axios from 'axios'\r\n\r\nexport default async function getWeekWeatherData(date){\r\n    const dateObj = date ? new Date(date) : new Date()\r\n    const day = String(dateObj.getDate())\r\n    const month = date ? String(dateObj.getMonth()+1) : String(dateObj.getMonth())\r\n    const year = String(dateObj.getFullYear())\r\n    const response = await axios.get(`https://node-proxy-cors.herokuapp.com/?month=${month}&year=${year}&day=${day}`)\r\n    return response.data\r\n}","import React from 'react'\r\nimport ReactTooltip from 'react-tooltip';\r\nexport default function WeatherCard(props){\r\n    const WeatherCardList = props.weather.map((weather)=>{\r\n        return (\r\n            <div key={weather.sol} className=\"col pb-1\">\r\n                <div className=\"card\">\r\n                    <div className=\"card-body\">\r\n                    <h5 className=\"card-title\">Sol {weather.sol} / <span className=\"font-weight-light font-italic\">Day on Mars</span></h5>\r\n                    <h6 className=\"card-subtitle text-muted\">{weather.season}</h6>\r\n                    <h2 data-tip data-for={\"temp-\"+weather.sol}>{weather.air.temperature.average.toPrecision(3)}<sup className=\"font-weight-light\">&deg;C</sup></h2>\r\n                    <span>\r\n                        <i className=\"fas fa-ruler-vertical \" data-tip data-for={\"pressure-\"+weather.sol}></i> <span className=\"mr-2\">{weather.air.pressure.average.toPrecision(4)}<sub className=\"font-weight-light font-italic\">Pa</sub></span>\r\n                    </span>\r\n                    <span>\r\n                        <i className=\"fas fa-wind\" data-tip data-for={\"wind-\"+weather.sol}></i><span>{weather.wind.speed.average.toPrecision(2)}<sub className=\"font-weight-light font-italic\">MPH</sub></span>\r\n                    </span>\r\n                    </div>\r\n                    <ReactTooltip id={\"temp-\"+weather.sol} effect=\"solid\" aria-haspopup='true'>\r\n                        <ul>\r\n                            <li>Minimum: {weather.air.temperature.minimum.toPrecision(3)}</li>\r\n                            <li>Average: {weather.air.temperature.average.toPrecision(3)}</li>\r\n                            <li>Maximum: {weather.air.temperature.maximum.toPrecision(3)}</li>\r\n                        </ul>\r\n                    </ReactTooltip>\r\n                    <ReactTooltip id={\"pressure-\"+weather.sol} effect=\"solid\" aria-haspopup='true'>\r\n                        <ul>\r\n                            <li>Minimum: {weather.air.pressure.minimum.toPrecision(4)}</li>\r\n                            <li>Average: {weather.air.pressure.average.toPrecision(4)}</li>\r\n                            <li>Maximum: {weather.air.pressure.maximum.toPrecision(4)}</li>\r\n                        </ul>\r\n                    </ReactTooltip>\r\n                    <ReactTooltip id={\"wind-\"+weather.sol} effect=\"solid\" aria-haspopup='true'>\r\n                        <ul>\r\n                            <li>Minimum: {weather.wind.speed.minimum.toPrecision(2)}</li>\r\n                            <li>Average: {weather.wind.speed.average.toPrecision(2)}</li>\r\n                            <li>Maximum: {weather.wind.speed.maximum.toPrecision(2)}</li>\r\n                        </ul>\r\n                    </ReactTooltip>\r\n                </div>\r\n            </div>\r\n        )\r\n    })\r\n\r\n\r\n    return (\r\n            <div className=\"row justify-content-around align-content-center h-75 \">\r\n                {WeatherCardList.length > 0 ? WeatherCardList : <h1 className=\"text-white\">Loading Data</h1>}\r\n            </div>\r\n    )\r\n}","import React from 'react'\r\n\r\nexport default function DatePicker(props){\r\n\r\n    function handleChange(e){\r\n        props.changeDate(e.target.value)\r\n    }\r\n\r\n    const date = new Date()\r\n    const inputValue = `${date.getFullYear()}-0${date.getMonth()}-0${date.getDate()}`\r\n    console.log(inputValue)\r\n    return (\r\n        <div className=\"row justify-content-around align-content-center h-25\">\r\n            <div className=\"form-group\">\r\n                <label htmlFor=\"date\" className=\"text-white\">Change Date</label>\r\n                <input type=\"date\" className=\"form-control\" id=\"date\" onChange={handleChange} min=\"2019-11-27\"  value={props.date ? props.date : inputValue}></input> \r\n            </div>\r\n        </div>\r\n    )\r\n}","import React,{Component} from 'react';\nimport getWeather from './utils/api'\nimport WeatherCard from './components/WeatherCard'\nimport DatePicker from './components/DatePicker'\nclass App extends Component {\n\n  state = {\n    weather: [],\n    date: null\n  }\n\n  async setStateWeather(weather){\n    const data = weather\n    if(data !== undefined) \n      this.setState({weather:data})\n  }\n\n  async componentDidMount(){\n    const data = await getWeather()\n    this.setStateWeather(data)\n  }\n\n  changeDate = (date) => {\n    this.setState({\n      date\n    })\n  }\n\n\n  async componentDidUpdate(prevProps, prevState){\n    if(prevState.date !== this.state.date){\n      const data = await getWeather(this.state.date)\n      this.setStateWeather(data)\n    }\n  }\n\n  render(){\n    return (\n      <div className=\"weather-app container-fluid\">\n        <WeatherCard weather={this.state.weather} />\n        <DatePicker changeDate={this.changeDate} date={this.state.date}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}